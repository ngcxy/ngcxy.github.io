<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ngcxy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ngcxy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-01-14T06:17:14+00:00</updated><id>https://ngcxy.github.io/feed.xml</id><title type="html">blank</title><subtitle>Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Building a GraphQL HTTP server with Express and MongoDB</title><link href="https://ngcxy.github.io/blog/2023/graphQL/" rel="alternate" type="text/html" title="Building a GraphQL HTTP server with Express and MongoDB"/><published>2023-12-05T16:40:16+00:00</published><updated>2023-12-05T16:40:16+00:00</updated><id>https://ngcxy.github.io/blog/2023/graphQL</id><content type="html" xml:base="https://ngcxy.github.io/blog/2023/graphQL/"><![CDATA[<p>GraphQL has become a popular choice for building APIs due to its flexibility and efficiency in data retrieval. In this post, we’ll explore a GraphQL server implemented using Express, backed by a MongoDB database. Specifically, we’ll create a robust API to manage players and matches for a hypothetical gaming platform.</p> <p>Check this code link: [https://github.com/ngcxy/GraphQL-HTTP-Express]</p> <p>(Source: adapted from several assignments of source <a href="https://web-app.usc.edu/soc/syllabus/20221/31250.pdf">USC EE547</a>)</p> <blockquote> <p>Background</p> </blockquote> <p>We choose <strong>Express.js</strong> Framework to set up our API endpoints, and <strong>MongoDB</strong> to store our data.</p> <p>The setup for <strong>Express.js</strong> is as follows, in which we initialize an instance of <strong>Express.js</strong> as <code class="language-plaintext highlighter-rouge">app</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">express</span><span class="p">();</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">static</span><span class="p">(</span><span class="dl">"</span><span class="s2">public</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div> <p>The setup for <strong>MongoDB</strong> is as follows, in which we import the <code class="language-plaintext highlighter-rouge">mongodb</code> and the config file (it’s ok if there’s no config file):</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">MongoClient</span><span class="p">,</span> <span class="nx">ObjectId</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">MONGO_CONFIG_FILE</span> <span class="o">=</span> <span class="s2">`./config/mongo.json`</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>Main Operations</p> </blockquote> <p>In the <code class="language-plaintext highlighter-rouge">SourceMongo</code> class lie main operations for “players” and “matches” in the database.</p> <p>Before assigning the functions, the first thing we need to do is to config our database.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">constructor</span><span class="p">(</span><span class="nx">FILEPATH</span><span class="p">){</span>
        <span class="k">try</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="nx">FILEPATH</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">port</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">27017</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">db</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">dbname</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">opts</span><span class="dl">"</span><span class="p">:{</span>
                    <span class="dl">"</span><span class="s2">useUnifiedTopology</span><span class="dl">"</span><span class="p">:</span><span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">uri</span> <span class="o">=</span> <span class="s2">`mongodb://</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">}</span><span class="s2">:</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">opts</span><span class="p">);</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">dbname</span><span class="dl">"</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_db</span> <span class="o">=</span> <span class="nx">database</span><span class="p">;</span>
            <span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">database</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">player</span><span class="dl">"</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">database</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">match</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>
</code></pre></div></div> <p>Then we are able to create operations including:</p> <ul> <li>createPlayer</li> <li>getPlayers/getPlayer</li> <li>getPlayerMatchInfo</li> <li>updatePlayer</li> <li>deletePlayer</li> </ul> <ul> <li>createMatch</li> <li>getMatches/getMatche</li> <li>dqPlayer(disqualify a player in the match)</li> <li>awardPlayer</li> <li>endMatch</li> </ul> <p>You can view these functions in the code through the link.</p> <h4 id="-more-classes-validator-error-and-decorator">* More classes: Validator, Error, and Decorator</h4> <hr/> <p>These are the additional classes that help keep our code more organized - understandable manageable. <code class="language-plaintext highlighter-rouge">Validator</code> is used to validate the value of the input. <code class="language-plaintext highlighter-rouge">Error</code> serves to give specific feedback about what error takes place. <code class="language-plaintext highlighter-rouge">Decorator</code> rearrange the information into the object with form we expect.</p> <p>By separating these classes, we’re able to reuse several functions and modify quickly in our code.</p> <hr/> <blockquote> <p>GraphQL Implementation</p> </blockquote> <p>In GraphQL, the building blocks of your API are defined using three key concepts: <strong>typeDefs</strong> (type definitions),<strong>resolvers</strong>, and <strong>schema</strong>.</p> <h4 id="typedefs">typeDefs</h4> <p>Type definitions define the data types available in the GraphQL API. They include object types, input types, enums, queries, mutations, and other elements. In Express.js, it is a string containing the GraphQL schema.</p> <p>Our typeDefs contains two main part:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  # operations for query, with required params and return type
  # for example
  players(
    limit:      Int    
    offset:     Int    
    sort:       String          
    is_active:  Boolean
    q:          String
  ): [Player]!  
}
</code></pre></div></div> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Mutation {
  # operations for mutation, with required params and return type
  # for example
  matchCreate(
    pid1:                ID!
    pid2:                ID!
    entry_fee_usd_cents: Int!
    prize_usd_cents:     Int!
  ): Match  
}
</code></pre></div></div> <p>and other necessary elements:</p> <ul> <li>type Player, type Match</li> <li>some inputs with type</li> <li>types for additional use, e.g., dashboard</li> </ul> <h4 id="resolvers">resolvers</h4> <p>Resolvers take the responsibility to actually handle the queries and mutations - they are functions that interact with our database operations. Each field in the schema has a corresponding resolver function that determines how to retrieve or calculate the data.</p> <p>The resolvers are created like this:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">resolvers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Mutation</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">playerCreate</span><span class="p">:</span> <span class="k">async </span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">playerInput</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">playerInput</span><span class="p">;</span>
            <span class="kd">let</span> <span class="nx">error</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">error_post_player</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">lname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">handed</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">initial_balance_usd_cents</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span>  <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nf">createPlayer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">lname</span><span class="p">,</span> <span class="nx">handedURL2Data</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">handed</span><span class="p">],</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">initial_balance_usd_cents</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">e</span><span class="p">.</span><span class="nf">error_print</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">playerUpdate</span><span class="p">:</span> <span class="k">async </span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">pid</span><span class="p">,</span> <span class="nx">playerInput</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">is_active</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">deco_is_active</span><span class="p">(</span><span class="nx">playerInput</span><span class="p">.</span><span class="nx">is_active</span><span class="p">);</span>
            <span class="kd">let</span> <span class="nx">lname</span> <span class="o">=</span> <span class="nx">playerInput</span><span class="p">.</span><span class="nx">lname</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
                <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nf">updatePlayer</span><span class="p">(</span><span class="nx">pid</span><span class="p">,</span> <span class="nx">lname</span><span class="p">,</span> <span class="nx">is_active</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
        <span class="p">},</span>
        
        <span class="c1">// other mutations...</span>
        
    <span class="p">},</span>

    <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">player</span><span class="p">:</span> <span class="k">async </span><span class="p">({},</span> <span class="p">{</span> <span class="nx">pid</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getPlayer</span><span class="p">(</span><span class="nx">pid</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="na">players</span><span class="p">:</span> <span class="k">async </span><span class="p">({},</span> <span class="p">{</span> <span class="nx">is_active</span><span class="p">,</span> <span class="nx">q</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">q</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nf">decodeURIComponent</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">;</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
                <span class="kd">var</span> <span class="nx">vars</span> <span class="o">=</span> <span class="nx">q</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">;</span><span class="dl">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">fname,lname</span><span class="dl">"</span><span class="p">;</span>
                <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getNamePlayers</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">vars</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">is_active</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">is_active</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getPlayers</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getSomePlayers</span><span class="p">(</span><span class="nx">is_active</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">},</span>
        
        <span class="c1">// other queries for match...</span>
        
    <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div> <h4 id="schema">Schema</h4> <p>When under Express.js framework, the <code class="language-plaintext highlighter-rouge">makeExecutableSchema</code> function from the <code class="language-plaintext highlighter-rouge">@graphql-tools/schema</code> library is used to combine typeDefs and resolvers into a GraphQL schema:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nf">makeExecutableSchema</span><span class="p">({</span>
    <span class="nx">resolvers</span><span class="p">,</span>
    <span class="na">resolverValidationOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">requireResolversForAllFields</span><span class="p">:</span> <span class="dl">"</span><span class="s2">warn</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">requireResolversToMatchSchema</span><span class="p">:</span> <span class="dl">"</span><span class="s2">warn</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="nx">typeDefs</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div> <p>Now, we successfully generate our schema, which is the overarching structure of the API.</p> <hr/> <p>Finally, we need to create the endpoint for graphQL. I also implement the GraphQL playground for Express.js, which is an interactive environment to where you can play around with GraphQL.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="dl">'</span><span class="s1">/graphql</span><span class="dl">'</span><span class="p">,</span> <span class="nf">createHandler</span><span class="p">({</span> <span class="nx">schema</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/playground</span><span class="dl">'</span><span class="p">,</span> <span class="nf">expressPlayground</span><span class="p">({</span> <span class="na">endpoint</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/graphql</span><span class="dl">'</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/ping</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">sendStatus</span><span class="p">(</span><span class="mi">204</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">);</span>
</code></pre></div></div> <p>After you start the server, you can find your API running on http://localhost:3000/graphql, and playground available on http://localhost:3000/playground</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/1/qu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/1/mu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="GraphQL"/><category term="Express"/><category term="HTTP"/><summary type="html"><![CDATA[GraphQL has become a popular choice for building APIs due to its flexibility and efficiency in data retrieval. In this post, we’ll explore a GraphQL server implemented using Express, backed by a MongoDB database. Specifically, we’ll create a robust API to manage players and matches for a hypothetical gaming platform.]]></summary></entry></feed>