<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://ngcxy.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://ngcxy.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-07-19T01:42:52+00:00</updated><id>https://ngcxy.github.io/feed.xml</id><title type="html">blank</title><subtitle>Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">ML Accelerator DataFlow: Output Stationary in three approaches</title><link href="https://ngcxy.github.io/blog/2024/accelerator/" rel="alternate" type="text/html" title="ML Accelerator DataFlow: Output Stationary in three approaches"/><published>2024-03-18T00:00:00+00:00</published><updated>2024-03-18T00:00:00+00:00</updated><id>https://ngcxy.github.io/blog/2024/accelerator</id><content type="html" xml:base="https://ngcxy.github.io/blog/2024/accelerator/"><![CDATA[<blockquote> <p>The Notebook of the post is provided in this <a href="https://github.com/ngcxy/Systems-of-ML">GitHub Link</a></p> </blockquote> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/3/header.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <ul> <li>image from EE-599 slides</li> </ul> <p>In course <a href="https://ece-classes.usc.edu/ee599ml/">USC EE-599:”Systems for Machine Learning”</a>, we learned three types of data-flow techniques often used in hardware accelerators: weight stationary, input stationary, and output stationary. In output stationary architecture, the output data remains stationary in the Processing Elements(PEs) while the input data and weights move.</p> <p>In this post, I’ll use Python to implement three approaches of 1D output stationary dataflow - one from the textbook, and other two came up by myself. I simulate PEs using the <code class="language-plaintext highlighter-rouge">Process</code> class from the <code class="language-plaintext highlighter-rouge">multiprocessing</code> library. Dataflows are managed via <code class="language-plaintext highlighter-rouge">Queue</code>, and outputs are stored in <code class="language-plaintext highlighter-rouge">Array</code>.</p> <hr/> <h3 id="output-stationary-1---textbook-example">Output Stationary 1 - textbook example</h3> <p>The weights are broadcast while activations(i.e., input feature map) are passed through the PEs sequentially.</p> <p>Notice that the PEs only retrieve weights when the required activations are passed in. Before that, the weights will be stored in the buffer of the queues.</p> <p>(For the figure on the right, notice that 0, 1, 2… are just index, not real number)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/3/os1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We can observe that in this case each PE needs to store the weight for a long time until the corresponding input is passed in, which in my point of view might not be an efficient way.</p> <h3 id="output-stationary-2">Output Stationary 2</h3> <p>In this new approach, we try simply switching the dataflow of the weights and activations. The activations are broadcast while weights are passed through the PEs sequentially.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/3/os2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>In this case, we no longer need to store any values in PE. The process is more straight-forward, and the runtime is also a bit faster.</p> <h3 id="output-stationary-3">Output Stationary 3</h3> <p>In this new approach, the weights are broadcast while activations are passed through the PEs sequentially.</p> <p>This is a special case where the IDs of the PEs in this approach are arranged in a reversed order. Also, all PEs will not start retrieving the broadcast weight until a certain time_step (when the first activation arrives at the last PE).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/3/os3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This method also avoids the storing issue, and achieves the highest efficiency among all.</p> <h3 id="simulation-result">Simulation Result</h3> <p>We tested these approaches using an input feature map of size 64, and the weight of size 4. The floating numbers are randomly generated. We then compared the simulation results with the expected ones.</p> <p>All three approaches passed the validation, the other two dataflows achieved a slightly <strong>faster runtime</strong> than the first one. It is also an advantage of the other two that they <strong>don’t need extra buffer</strong> to store the values.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/3/res.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="Python"/><category term="Hardware-accelerator"/><category term="Data-flow"/><category term="Multi-thread"/><summary type="html"><![CDATA[The Notebook of the post is provided in this GitHub Link]]></summary></entry><entry><title type="html">Website hosting with AWS EC2, API Gateway and Vercel</title><link href="https://ngcxy.github.io/blog/2024/host/" rel="alternate" type="text/html" title="Website hosting with AWS EC2, API Gateway and Vercel"/><published>2024-03-09T16:40:16+00:00</published><updated>2024-03-09T16:40:16+00:00</updated><id>https://ngcxy.github.io/blog/2024/host</id><content type="html" xml:base="https://ngcxy.github.io/blog/2024/host/"><![CDATA[<p>This is a personal-use post for hosting a full-stack website for public access. Everytime I wanted to deploy a new website, I had to go through several tutorials and stuck in the same problems over and over again. Therefore, I decide to record the whole process in this post based on my previous experience, so that I can deploy my website smoother in the future.</p> <p>(P.S. Screenshots will be uploaded in the near future)</p> <h1 id="backend">Backend</h1> <p>The backend will be hosted on AWS EC2. First, check if your AWS account still has enough free tier usage (i.e., it’s in the first 12 month). If you can afford, never mind. Otherwise, create a new account.</p> <h3 id="security-group">Security Group</h3> <p>Two SG should be created: one for ssh connection, one for internet access</p> <p>ssh-sg:</p> <ul> <li>inbound: SSH-TCP-22-Custom-0.0.0.0/0</li> <li>outbound: All traffic-All-All-Custom-0.0.0.0/0</li> </ul> <p>internet-sg:</p> <ul> <li>inbound: Custom TCP-TCP-4000-Custom-0.0.0.0/0, HTTP-TCP-80-Custom-0.0.0.0/0, HTTPS-TCP-443-Custom-0.0.0.0/0</li> <li>outbound: All traffic-All-All-Custom-0.0.0.0/0</li> </ul> <h3 id="ec2-instance">EC2 instance</h3> <p>Linux, t2.micro, select a key pair, put 2 SGs in, launch.</p> <p>After the instance is successfully launched, connect it via SSH. (in aws/local terminal)</p> <h3 id="initialize-machine">Initialize machine</h3> <p>Run the following code to update the environment:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>nodejs <span class="nt">-y</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>npm <span class="nt">-y</span>
<span class="nb">sudo </span>npm <span class="nb">install</span> <span class="nt">--global</span> yarn
<span class="nb">sudo </span>npm i ts-node <span class="nt">--g</span>
<span class="nb">sudo </span>snap <span class="nb">install </span>docker
<span class="nb">sudo </span>docker version     <span class="c"># check if success</span>
</code></pre></div></div> <h3 id="repository-download">Repository download</h3> <p>Generate an SSH Key for GitHub access:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen
</code></pre></div></div> <p>Then paste the public key into GitHub Settings.</p> <p>Select a location to clone the GitHub repository. Remember to check some configuration such as the base url and port.</p> <p><strong>Direct to that folder.</strong></p> <p>Add a .env file if your app uses environment variables. Then go into the file and paste in your environment variables.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch</span> .env
<span class="nb">sudo </span>nano .env
</code></pre></div></div> <h3 id="first-test">First Test</h3> <p>Run the application. The terminal should show success message. We cannot access through the ip yet, since the port isn’t accessible right now.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install
</span>node server.js
</code></pre></div></div> <p>If you encounter this problem:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>            session: options?.session,
                             ^
SyntaxError: Unexpected token '.'
</code></pre></div></div> <p>Just update your Node.js:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-o-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash

<span class="nb">export </span><span class="nv">NVM_DIR</span><span class="o">=</span><span class="s2">"</span><span class="nv">$HOME</span><span class="s2">/.nvm"</span>
<span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/nvm.sh"</span>  <span class="c"># This loads nvm</span>
<span class="o">[</span> <span class="nt">-s</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span> <span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="se">\.</span> <span class="s2">"</span><span class="nv">$NVM_DIR</span><span class="s2">/bash_completion"</span>  <span class="c"># This loads nvm bash_completion</span>

nvm ls-remote
nvm <span class="nb">install</span> &lt;version&gt;
nvm use &lt;version&gt;
</code></pre></div></div> <h3 id="add-nginx-with-docker">Add NGINX with Docker</h3> <p>NGINX: a highly popular open-source web server, reverse proxy server, load balancer, and HTTP cache.</p> <p>Go to root directory, install NGINX, and go to that directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~
git clone https://github.com/coderaidershaun/nginx-with-docker.git
<span class="nb">cd </span>nginx-with-docker
<span class="nb">sudo </span>nano nginx.conf <span class="c"># modify the config file</span>
</code></pre></div></div> <p>Modify the conf file following the comment, change all the “frontend” part to “backend”. Then build the docker image(might take some time):</p> <p><em>tips for nano: save&amp;exit is Ctrl+O, Enter, Ctrl+X</em></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>docker build <span class="nt">-t</span> nginx-with-docker <span class="nb">.</span> <span class="nt">--no-cache</span>
</code></pre></div></div> <h3 id="permanently-running-service">Permanently running service</h3> <p>We need to keep the NGINX and backend running all the time even after system reboot.</p> <p>For NGINX:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~
<span class="nb">sudo </span>nano /etc/systemd/system/reverseproxy.service
</code></pre></div></div> <p>Paste this in the service file:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Reverseproxy Service
After=network.target
Wants=network.target

[Service]
Type=simple
Restart=always
RestartSec=5
ExecStart=sudo docker run -p 80:80 nginx-with-docker

[Install]
WantedBy=default.target
</code></pre></div></div> <p>Then start the service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>reverseproxy
<span class="nb">sudo </span>systemctl start reverseproxy
<span class="nb">sudo </span>systemctl status reverseproxy
</code></pre></div></div> <p>The status should show “active (running)” in green.</p> <p>Other useful code for debug:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl stop reverseproxy
<span class="nb">sudo </span>journalctl <span class="nt">-fu</span> reverseproxy.service
</code></pre></div></div> <hr/> <p>For Backend:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~
<span class="nb">sudo </span>nano /etc/systemd/system/backend.service
</code></pre></div></div> <p>You should find the path of your new version of node.js using “whereis node”. Then remember to change the path in below.</p> <p>Paste this in the service file:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[Unit]
Description=Backend Service
After=network.target
Wants=network.target

[Service]
Type=simple
Restart=always
RestartSec=5
ExecStart=/home/ubuntu/.nvm/versions/node/v20.11.1/bin/node /home/ubuntu/movipendent/backend/server.js

[Install]
WantedBy=default.target
</code></pre></div></div> <p>Then start the service:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl <span class="nb">enable </span>backend
<span class="nb">sudo </span>systemctl start backend
<span class="nb">sudo </span>systemctl status backend
</code></pre></div></div> <h3 id="second-test">Second test</h3> <p>Now access your <strong>endpoint</strong> through HTTP, you should see your server working.</p> <h1 id="frontend">Frontend</h1> <p>Somehow my EC2 t2.micro always fails when I try to run frontend and backend simultaneously, so I turn to Vercel to host my frontend.</p> <p>The steps on Vercel are quite straight-forward, just connect to your gitHub repository and modify the backend url in config file. The most critical issue is to establish a connection between Vercel as HTTPS to EC2 instance as HTTP.</p> <h1 id="api-gateway">API Gateway</h1> <p>AWS API Gateway can expose an HTTPS endpoint that communicates with your backend over HTTP. This way, your frontend can make secure HTTPS requests to the API Gateway, and the API Gateway handles communication with your backend over HTTP.</p> <p>First, create API in AWS API Gateway. If the backend follows a RESTful pattern, select REST API</p> <p>Now build your API branches in “Resources”: you can add resources under a path, and create a method for this resource. For the endpoint, enter the actual endpoint that is running on your EC2 instance. Also, enable CORS for each endpoint (both 4XX, 5XX, GET method) In my case, I need to click “enable CORS” and configure for <strong>twice</strong> until the CORS is actually enabled.</p> <ul> <li> <p>GET method with a query: besides assigning the query when creating this method, you also make other configurations. In Integrations request - URL query string parameters, add the mapping relation (see its info for detailed format)</p> </li> <li> <p>POST or DELETE method with a request body: in the method request, find the “Request body” at the last row. Add a model with content type of “application/json” and Model of “empty”.</p> </li> </ul> <p>After all the configuration, deploy the APIs as one stage, and it’s all done, CONGRATULATIONS!</p>]]></content><author><name></name></author><category term="EC2"/><category term="Vercel"/><category term="Full-stack"/><category term="NGINX"/><category term="Docker"/><summary type="html"><![CDATA[This is a personal-use post for hosting a full-stack website for public access. Everytime I wanted to deploy a new website, I had to go through several tutorials and stuck in the same problems over and over again. Therefore, I decide to record the whole process in this post based on my previous experience, so that I can deploy my website smoother in the future.]]></summary></entry><entry><title type="html">Building a GraphQL HTTP server with Express and MongoDB</title><link href="https://ngcxy.github.io/blog/2024/graphQL/" rel="alternate" type="text/html" title="Building a GraphQL HTTP server with Express and MongoDB"/><published>2024-01-10T16:40:16+00:00</published><updated>2024-01-10T16:40:16+00:00</updated><id>https://ngcxy.github.io/blog/2024/graphQL</id><content type="html" xml:base="https://ngcxy.github.io/blog/2024/graphQL/"><![CDATA[<p>GraphQL has become a popular choice for building APIs due to its flexibility and efficiency in data retrieval. In this post, we’ll explore a GraphQL server implemented using Express, backed by a MongoDB database. Specifically, we’ll create a robust API to manage players and matches for a hypothetical gaming platform.</p> <p>Check this code link: <a href="https://github.com/ngcxy/GraphQL-HTTP-Express">https://github.com/ngcxy/GraphQL-HTTP-Express</a></p> <p>(Source: adapted from several assignments of source <a href="https://web-app.usc.edu/soc/syllabus/20221/31250.pdf">USC EE547</a>)</p> <blockquote> <p>Background</p> </blockquote> <p>We choose <strong>Express.js</strong> Framework to set up our API endpoints, and <strong>MongoDB</strong> to store our data.</p> <p>The setup for <strong>Express.js</strong> is as follows, in which we initialize an instance of <strong>Express.js</strong> as <code class="language-plaintext highlighter-rouge">app</code>:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">express</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">express</span><span class="dl">'</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">PORT</span> <span class="o">=</span> <span class="mi">3000</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="nf">express</span><span class="p">();</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">json</span><span class="p">());</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">urlencoded</span><span class="p">({</span> <span class="na">extended</span><span class="p">:</span> <span class="kc">true</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">use</span><span class="p">(</span><span class="nx">express</span><span class="p">.</span><span class="nf">static</span><span class="p">(</span><span class="dl">"</span><span class="s2">public</span><span class="dl">"</span><span class="p">));</span>
</code></pre></div></div> <p>The setup for <strong>MongoDB</strong> is as follows, in which we import the <code class="language-plaintext highlighter-rouge">mongodb</code> and the config file (it’s ok if there’s no config file):</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="p">{</span> <span class="nx">MongoClient</span><span class="p">,</span> <span class="nx">ObjectId</span><span class="p">}</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="dl">"</span><span class="s2">mongodb</span><span class="dl">"</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">MONGO_CONFIG_FILE</span> <span class="o">=</span> <span class="s2">`./config/mongo.json`</span><span class="p">;</span>
</code></pre></div></div> <blockquote> <p>Main Operations</p> </blockquote> <p>In the <code class="language-plaintext highlighter-rouge">SourceMongo</code> class lie main operations for “players” and “matches” in the database.</p> <p>Before assigning the functions, the first thing we need to do is to config our database.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nf">constructor</span><span class="p">(</span><span class="nx">FILEPATH</span><span class="p">){</span>
        <span class="k">try</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="nf">require</span><span class="p">(</span><span class="nx">FILEPATH</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">catch</span><span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">config</span> <span class="o">=</span> <span class="p">{</span>
                <span class="dl">"</span><span class="s2">host</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">localhost</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">port</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">27017</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">db</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">dbname</span><span class="dl">"</span><span class="p">,</span>
                <span class="dl">"</span><span class="s2">opts</span><span class="dl">"</span><span class="p">:{</span>
                    <span class="dl">"</span><span class="s2">useUnifiedTopology</span><span class="dl">"</span><span class="p">:</span><span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">uri</span> <span class="o">=</span> <span class="s2">`mongodb://</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">host</span><span class="p">}</span><span class="s2">:</span><span class="p">${</span><span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">port</span><span class="p">}</span><span class="s2">`</span><span class="p">;</span>
        <span class="kd">const</span> <span class="nx">client</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MongoClient</span><span class="p">(</span><span class="nx">uri</span><span class="p">,</span> <span class="k">this</span><span class="p">.</span><span class="nx">config</span><span class="p">.</span><span class="nx">opts</span><span class="p">);</span>
        <span class="k">try</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">database</span> <span class="o">=</span> <span class="nx">client</span><span class="p">.</span><span class="nf">db</span><span class="p">(</span><span class="dl">"</span><span class="s2">dbname</span><span class="dl">"</span><span class="p">);</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">_db</span> <span class="o">=</span> <span class="nx">database</span><span class="p">;</span>
            <span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span> <span class="nx">database</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">player</span><span class="dl">"</span><span class="p">);</span>
            <span class="kd">const</span> <span class="nx">match</span> <span class="o">=</span> <span class="nx">database</span><span class="p">.</span><span class="nf">collection</span><span class="p">(</span><span class="dl">"</span><span class="s2">match</span><span class="dl">"</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">catch </span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
            <span class="nx">process</span><span class="p">.</span><span class="nf">exit</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">};</span>
</code></pre></div></div> <p>Then we are able to create operations including:</p> <ul> <li>createPlayer</li> <li>getPlayers/getPlayer</li> <li>getPlayerMatchInfo</li> <li>updatePlayer</li> <li>deletePlayer</li> </ul> <ul> <li>createMatch</li> <li>getMatches/getMatche</li> <li>dqPlayer(disqualify a player in the match)</li> <li>awardPlayer</li> <li>endMatch</li> </ul> <p>You can view these functions in the code through the link.</p> <h4 id="-more-classes-validator-error-and-decorator">* More classes: Validator, Error, and Decorator</h4> <hr/> <p>These are the additional classes that help keep our code more organized - understandable manageable. <code class="language-plaintext highlighter-rouge">Validator</code> is used to validate the value of the input. <code class="language-plaintext highlighter-rouge">Error</code> serves to give specific feedback about what error takes place. <code class="language-plaintext highlighter-rouge">Decorator</code> rearrange the information into the object with form we expect.</p> <p>By separating these classes, we’re able to reuse several functions and modify quickly in our code.</p> <hr/> <blockquote> <p>GraphQL Implementation</p> </blockquote> <p>In GraphQL, the building blocks of your API are defined using three key concepts: <strong>typeDefs</strong> (type definitions),<strong>resolvers</strong>, and <strong>schema</strong>.</p> <h4 id="typedefs">typeDefs</h4> <p>Type definitions define the data types available in the GraphQL API. They include object types, input types, enums, queries, mutations, and other elements. In Express.js, it is a string containing the GraphQL schema.</p> <p>Our typeDefs contains two main part:</p> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Query {
  # operations for query, with required params and return type
  # for example
  players(
    limit:      Int    
    offset:     Int    
    sort:       String          
    is_active:  Boolean
    q:          String
  ): [Player]!  
}
</code></pre></div></div> <div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type Mutation {
  # operations for mutation, with required params and return type
  # for example
  matchCreate(
    pid1:                ID!
    pid2:                ID!
    entry_fee_usd_cents: Int!
    prize_usd_cents:     Int!
  ): Match  
}
</code></pre></div></div> <p>and other necessary elements:</p> <ul> <li>type Player, type Match</li> <li>some inputs with type</li> <li>types for additional use, e.g., dashboard</li> </ul> <h4 id="resolvers">resolvers</h4> <p>Resolvers take the responsibility to actually handle the queries and mutations - they are functions that interact with our database operations. Each field in the schema has a corresponding resolver function that determines how to retrieve or calculate the data.</p> <p>The resolvers are created like this:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">const</span> <span class="nx">resolvers</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">Mutation</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">playerCreate</span><span class="p">:</span> <span class="k">async </span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">playerInput</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">const</span> <span class="nx">b</span> <span class="o">=</span> <span class="nx">playerInput</span><span class="p">;</span>
            <span class="kd">let</span> <span class="nx">error</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nf">error_post_player</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">lname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">handed</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">initial_balance_usd_cents</span><span class="p">);</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">error</span><span class="p">.</span><span class="nx">length</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">const</span> <span class="nx">player</span> <span class="o">=</span>  <span class="k">await</span> <span class="nx">db</span><span class="p">.</span><span class="nf">createPlayer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fname</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">lname</span><span class="p">,</span> <span class="nx">handedURL2Data</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">handed</span><span class="p">],</span> <span class="kc">true</span><span class="p">,</span> <span class="nx">b</span><span class="p">.</span><span class="nx">initial_balance_usd_cents</span><span class="p">);</span>
                <span class="k">return</span> <span class="nx">player</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="nx">e</span><span class="p">.</span><span class="nf">error_print</span><span class="p">(</span><span class="nx">error</span><span class="p">);</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nc">Error</span><span class="p">();</span>
            <span class="p">}</span>
        <span class="p">},</span>
        <span class="na">playerUpdate</span><span class="p">:</span> <span class="k">async </span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="p">{</span> <span class="nx">pid</span><span class="p">,</span> <span class="nx">playerInput</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="kd">let</span> <span class="nx">is_active</span> <span class="o">=</span> <span class="nx">d</span><span class="p">.</span><span class="nf">deco_is_active</span><span class="p">(</span><span class="nx">playerInput</span><span class="p">.</span><span class="nx">is_active</span><span class="p">);</span>
            <span class="kd">let</span> <span class="nx">lname</span> <span class="o">=</span> <span class="nx">playerInput</span><span class="p">.</span><span class="nx">lname</span> <span class="o">??</span> <span class="kc">null</span><span class="p">;</span>
                <span class="k">return</span> <span class="nx">db</span><span class="p">.</span><span class="nf">updatePlayer</span><span class="p">(</span><span class="nx">pid</span><span class="p">,</span> <span class="nx">lname</span><span class="p">,</span> <span class="nx">is_active</span><span class="p">,</span> <span class="kc">null</span><span class="p">);</span>
        <span class="p">},</span>
        
        <span class="c1">// other mutations...</span>
        
    <span class="p">},</span>

    <span class="na">Query</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">player</span><span class="p">:</span> <span class="k">async </span><span class="p">({},</span> <span class="p">{</span> <span class="nx">pid</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getPlayer</span><span class="p">(</span><span class="nx">pid</span><span class="p">);</span>
        <span class="p">},</span>

        <span class="na">players</span><span class="p">:</span> <span class="k">async </span><span class="p">({},</span> <span class="p">{</span> <span class="nx">is_active</span><span class="p">,</span> <span class="nx">q</span> <span class="p">},</span> <span class="nx">DB</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">q</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
                <span class="kd">let</span> <span class="nx">name</span> <span class="o">=</span> <span class="nf">decodeURIComponent</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">;</span><span class="dl">"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]);</span>
                <span class="kd">var</span> <span class="nx">vars</span> <span class="o">=</span> <span class="nx">q</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="dl">"</span><span class="s2">;</span><span class="dl">"</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span> <span class="o">||</span> <span class="dl">"</span><span class="s2">fname,lname</span><span class="dl">"</span><span class="p">;</span>
                <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getNamePlayers</span><span class="p">(</span><span class="nx">name</span><span class="p">,</span> <span class="nx">vars</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">if </span><span class="p">(</span><span class="nx">is_active</span> <span class="o">==</span> <span class="kc">undefined</span> <span class="o">||</span> <span class="nx">is_active</span> <span class="o">==</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="k">await</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getPlayers</span><span class="p">();</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="k">return</span> <span class="nx">DB</span><span class="p">.</span><span class="nf">getSomePlayers</span><span class="p">(</span><span class="nx">is_active</span><span class="p">);</span>
            <span class="p">}</span>
        <span class="p">},</span>
        
        <span class="c1">// other queries for match...</span>
        
    <span class="p">},</span>
<span class="p">};</span>
</code></pre></div></div> <h4 id="schema">Schema</h4> <p>When under Express.js framework, the <code class="language-plaintext highlighter-rouge">makeExecutableSchema</code> function from the <code class="language-plaintext highlighter-rouge">@graphql-tools/schema</code> library is used to combine typeDefs and resolvers into a GraphQL schema:</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">schema</span> <span class="o">=</span> <span class="nf">makeExecutableSchema</span><span class="p">({</span>
    <span class="nx">resolvers</span><span class="p">,</span>
    <span class="na">resolverValidationOptions</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">requireResolversForAllFields</span><span class="p">:</span> <span class="dl">"</span><span class="s2">warn</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">requireResolversToMatchSchema</span><span class="p">:</span> <span class="dl">"</span><span class="s2">warn</span><span class="dl">"</span><span class="p">,</span>
    <span class="p">},</span>
    <span class="nx">typeDefs</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div> <p>Now, we successfully generate our schema, which is the overarching structure of the API.</p> <hr/> <p>Finally, we need to create the endpoint for graphQL. I also implement the GraphQL playground for Express.js, which is an interactive environment to where you can play around with GraphQL.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="dl">'</span><span class="s1">/graphql</span><span class="dl">'</span><span class="p">,</span> <span class="nf">createHandler</span><span class="p">({</span> <span class="nx">schema</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/playground</span><span class="dl">'</span><span class="p">,</span> <span class="nf">expressPlayground</span><span class="p">({</span> <span class="na">endpoint</span><span class="p">:</span> <span class="dl">'</span><span class="s1">/graphql</span><span class="dl">'</span> <span class="p">}));</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="dl">"</span><span class="s2">/ping</span><span class="dl">"</span><span class="p">,</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">res</span><span class="p">.</span><span class="nf">sendStatus</span><span class="p">(</span><span class="mi">204</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">app</span><span class="p">.</span><span class="nf">listen</span><span class="p">(</span><span class="nx">PORT</span><span class="p">);</span>
</code></pre></div></div> <p>After you start the server, you can find your API running on <a href="http://localhost:3000/graphql">http://localhost:3000/graphql</a>, and playground available on <a href="http://localhost:3000/playground">http://localhost:3000/playground</a></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/1/qu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <img src="/assets/img/post/1/mu.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div>]]></content><author><name></name></author><category term="GraphQL"/><category term="Express"/><category term="HTTP"/><summary type="html"><![CDATA[GraphQL has become a popular choice for building APIs due to its flexibility and efficiency in data retrieval. In this post, we’ll explore a GraphQL server implemented using Express, backed by a MongoDB database. Specifically, we’ll create a robust API to manage players and matches for a hypothetical gaming platform.]]></summary></entry></feed>